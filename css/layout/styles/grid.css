/* 
CSS Grids
Source: https://css-tricks.com/snippets/css/complete-guide-grid/
*/

/* Properties for the Parent (Grid Container) */

/* 

display: grid | inline-grid;

Defines the element as a grid container and establishes 
a new grid formatting context for its contents.

grid – generates a block-level grid
inline-grid – generates an inline-level grid

*/

/*

grid-template-columns: 1fr 1fr 1fr;
e.g. 
    1fr 1fr
    minmax(10px, 1fr) 3fr
    repeat(5, 1fr)
    50px auto 100px 1fr

grid-template-rows: 1fr 50px 1fr 1fr;
e.g. 
    min-content 1fr min-content
    100px 1fr max-content


Defines the columns and rows of the grid with a space-separated 
list of values. The values represent the track size, and the 
space between them represents the grid line.

*/

/* 

grid-template-areas: 
    "header header header header"
    "main main . sidebar"
    "footer footer footer footer";

Defines a grid template by referencing the names of the grid areas 
which are specified with the grid-area property.

Repeating the name of a grid area causes the content to span those cells. 
A period signifies an empty cell. 
The syntax itself provides a visualization of the structure of the grid.

.item-a {
  grid-area: header;
}
.item-b {
  grid-area: main;
}
.item-c {
  grid-area: sidebar;
}
.item-d {
  grid-area: footer;
}

.container {
  display: grid;
  grid-template-columns: 50px 50px 50px 50px;
  grid-template-rows: auto;
  grid-template-areas: 
    "header header header header"
    "main main . sidebar"
    "footer footer footer footer";
}

*/

/* 

grid-template: <grid-template-rows> / <grid-template-columns>;

A shorthand for setting grid-template-rows, grid-template-columns, 
and grid-template-areas in a single declaration.

*/

/* 

column-gap: <line-size>;
row-gap: <line-size>;

<line-size> – a length value

Specifies the size of the grid lines. 
You can think of it like setting the width of the 
gutters between the columns/rows.

*/

/* 

gap: <grid-row-gap> <grid-column-gap>;

A shorthand for row-gap and column-gap

*/

body {
  margin: 0;
}

.container {
  display: grid;
  grid-template-rows: 100px auto 100px;
  grid-template-columns: 30fr 70fr;
  gap: 10px;

  grid-template-areas:
    "header  header"
    "sidebar main"
    "footer  footer";

  border: 3px solid lightgray;

  height: calc(100vh - 6px);
}

.box {
  /* width: 5rem;
  height: 5rem; */

  background-color: gold;
}

/* 

Aligning Grid Items

justify-items: start | end | center | stretch; 
Align items along the horizontal axis


align-items: start | end | center | stretch;
Align items along the vertical axis

place-items: <align-items> / <justify-items>;
Sets both the align-items and justify-items properties in a single declaration.

*/

.container {
  /* stretch is the default value */
  justify-items: stretch;
  align-items: stretch;
}

/* 

Aligning Grid Container

justify-content: start | end | center | stretch | space-around | space-between | space-evenly; 
Align grid along the horizontal axis inside its container

align-content: start | end | center | stretch | space-around | space-between | space-evenly;    
Align grid along the vertical axis inside its container

place-content: <align-content> / <justify-content>
Sets both the align-content and justify-content properties in a single declaration.

*/

/* .container {
 justify-content: center;
  align-content: center; 
} */

/* Properties for the Children (Grid Items) */

/* 

Placing items

grid-column: <start-line> / <end-line>;
grid-row: <start-line> / <end-line>;

By using these properties we can tell where exactly the item should be placed.

Shorthand for grid-column-start + grid-column-end, 
and grid-row-start + grid-row-end, respectively.

*/

.box-one {
  grid-column: 1 / 3;
  /* 
  or we can write 

  grid-column: 1 / -1;
  grid-column: 1 / span 2;

  and if we have specified grid-template-areas,
  we can use

  grid-area: header;
  */
}

.box-four {
  grid-area: footer;
}

/* 

Aligning Grid Item (self)

justify-self: start | end | center | stretch;
Aligns a grid item inside a cell along the horizontal axis

align-self: start | end | center | stretch;
Aligns a grid item inside a cell along the vertical axis

place-self: <align-self> / <justify-self>;
Sets both the align-self and justify-self properties in a single declaration.

*/

/* 

Special Unit

fr unit
They essentially mean “portion of the remaining space”.

*/